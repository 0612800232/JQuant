{
  "name": "JQuant",
  "tagline": "JQuant是使用java语言编写的量化开发工具箱，使用JQuant可以获取股票数据，及各种常用指标和策略的计算。方便Java爱好者进行量化投资研究。 QQ群：281599099，微信订阅号：quantfan",
  "body": "# JQuant\r\n\r\n# Maven依赖\r\n\r\n```xml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>net.jquant</groupId>\r\n        <artifactId>JQuant</artifactId>\r\n        <version>0.1</version>\r\n    </dependency>\r\n</dependencies>\r\n\r\n<repositories>\r\n    <repository>\r\n        <id>oss</id>\r\n        <url>https://oss.sonatype.org/content/groups/public/</url>\r\n    </repository>\r\n</repositories>\r\n```\r\n\r\n# 示例\r\n\r\n```java\r\npackage quant.fans;\r\n\r\nimport quant.fans.model.StockData;\r\n\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Quants quants = new Quants();\r\n        //获取股票列表\r\n        List<String> list = quants.data.stockList();\r\n\r\n        for (String stock : list) {\r\n            //StockData代表一个时间片的数据，例如日线级别，每个StockData为一天收盘后的股票数据\r\n            List<StockData> stockDatas = quants.data.dailyData(stock);\r\n            //剔除交易数据小于60天的股票\r\n            if (stockDatas == null || stockDatas.size() < 60) {\r\n                continue;\r\n            }\r\n            //indicator包含常用指标的计算\r\n            quants.indicator.macd(stockDatas);\r\n            //获取5、10、20、30、40、60均线，也可以通过sma(stockDatas,ma)获取指定时间间隔的均线\r\n            quants.indicator.sma(stockDatas);\r\n            quants.indicator.boll(stockDatas);\r\n            quants.indicator.kdj(stockDatas);\r\n            //strategy包含简单的策略计算，例如macd金叉\r\n            quants.strategy.macdCross(stockDatas);\r\n            quants.strategy.kdjCross(stockDatas);\r\n            quants.strategy.goldenSpider(stockDatas);\r\n            quants.strategy.bollThroat(stockDatas);\r\n            for (StockData stockData : stockDatas) {\r\n                System.out.println(stockData);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# API\r\n\r\n## 初始化\r\n\r\n> Quants quants = new Quants();\r\n\r\n`StockData`表示股票的一个时间片的数据，继承自LinkedHashMap<String,Double>，存储属性名称和double类型数值。\r\n\r\n```java\r\nStockData stockData = Provider.realtimeData(\"000001\");\r\nSystem.out.println(\"股票名称:\" + stockData.name);\r\nSystem.out.println(\"股票代码:\" + stockData.symbol);\r\nfor(Map.Entry<String,Double> data : stockData.entrySet()){\r\n    System.out.println(data.getKey() + \"=\" + data.getValue());\r\n}\r\n```\r\n\r\n不同Provider返回的StockData的数据项不同，具体信息查询[字段说明](https://github.com/eryk/JQuant/wiki/StockData%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E)\r\n\r\n## 股票数据 quants.data\r\n\r\nnet.jquant.provider包提供了股票相关的数据获取类\r\n\r\n### Provider列表如下：\r\n\r\n* DailyDataProvider：日线级别数据\r\n* MinuteDataProvider：分钟级别股票数据，可获得5、15、30、60分钟级别股票数据\r\n* RealTimeDataProvider：实时股票数据\r\n* StockIndexDataProvider：指数实时行情数据\r\n* TickDataProvider：股票逐笔数据\r\n* TopListDataProvider：龙虎榜数据\r\n* ReportDataProvider：研报数据\r\n* ReferenceDataProvider：分红数据\r\n* MoneyFlowDataProvider：股票资金流数据\r\n* FinanceDataProvider：个股财务报表数据\r\n\r\n> net.jquant.provider.Provider类里的static方法汇总了全部provider方法，一般情况，使用Provider类就可以满足数据查询需求。\r\n\r\n## 股票列表 quants.stocks\r\n\r\n`StockList` 用于获取股票列表，并提供一些过滤和处理接口对股票进行筛选。\r\n\r\n## 指标计算 quants.indicator\r\n\r\n`net.jquant。Indicators` 是对[Ta-lib](http://ta-lib.org/function.html)库的封装，提供常用指标计算，返回StockData list对象。同时也提供了一些Ta-lib没有的指标计算。\r\n\r\n支持的指标包括：\r\n\r\n* sma：简单移动平均线\r\n* ema：指数移动平均线\r\n* dma：平均线差\r\n* macd：指数平滑异同平均线\r\n* boll：布林线\r\n* kdj：随机指标\r\n* rsi：强弱指标\r\n* sar：抛物线指标或停损转向操作点指标\r\n* adx：平均趋向指数\r\n* adxr：趋向指标\r\n* cci：顺势指标\r\n* mfi：资金流量指标\r\n* obv：能量潮又称为平衡交易量\r\n* roc：变动率指标\r\n* rocP：Rate of change Percentage: (price-prevPrice)/prevPrice\r\n* trix：三重指数平滑平均线\r\n* willR：威廉指标\r\n* ad：收集派发摆荡指标\r\n* aroon：阿隆指标\r\n* aroonOsc：Aroon Oscillator\r\n* bop：均势指标\r\n* kama：适应性移动平均线\r\n* trima：三角移动平均线\r\n\r\n## 策略计算 quants.strategy\r\n\r\n* `StragegyUtils` 常用策略\r\n* `TDXFunction` 通达信常用指标\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}